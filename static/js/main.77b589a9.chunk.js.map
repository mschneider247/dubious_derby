{"version":3,"sources":["images/racetrack.jpg","images/DDBack.jpg","App.js","index.js"],"names":["module","exports","App","inputAttribute","e","setState","target","name","value","inputRacers","InputRacers","placeholder","type","state","onChange","Tooltip","title","arrow","Button","variant","color","onClick","inputBtn","message","raceMessage","newRacer","id","Date","now","currentPlace","speedboost","icon","icons","Math","floor","random","length","newRacers","racers","push","deleteRacer","smallerRoster","forEach","racer","i","splice","boostRacer","boostRoster","setupRace","raceStart","startRace","speedBoostCheck","currentRacer","numRacers","randomIndex","racerUpdate","round","currentRound","finishPlace","winner","setTimeout","winCondition","reRace","refreshRacers","map","resetRacer","whosWinning","renderWinners","index","key","lastRacerRoster","sortedRacers","sort","a","b","lastRacers","winnerName","displayRacers","this","racePosition","className","DeleteBtn","CarrotBtn","role","aria-label","Typography","GameBoard","Header","TitleAndRules","Rules","Body","RaceMessage","RaceTrack","RaceStats","Component","styled","div","ul","racetrack","button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77b589a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/racetrack.1855b73f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DDBack.c9a36704.jpg\";","import React, { Component } from 'react';\nimport 'typeface-roboto';\nimport './App.css'\nimport { Button, Typography, Tooltip, Input } from '@material-ui/core';\nimport styled from 'styled-components';\nimport racetrack from './images/racetrack.jpg'\nimport DDBack from './images/DDBack.jpg'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      currentRound: 0,\n      currentPlace: 0,\n      finishPlace: 7,\n      raceStart: false,\n      raceMessage: \"\",\n      winCondition: false,\n      winnerName: \"\",\n      racers: [],\n      icons: [\"🐶\", \"🐱\", \"🐭\", \"🐹\", \"🐰\", \"🦊\", \"🐻\", \"🐼\", \"🐨\", \"🐯\", \"🦁\", \"🐮\", \"🐷\", \"🐸\", \"🐵\", \"🤪\", \"🤨\", \"🧐\", \"🤓\", \"😎\", \"🤩\", \"🥳\", \"🥴\", \"🤢\", \"🤮\", \"🤒\", \"🤕\", \"🤑\", \"🤠\", \"😈\", \"👹\", \"💀\", \"👽\", \"👾\", \"🤖\", \"🎃\", \"🧠\",\"😭\", \"😤\", \"🤬\", \"🤯\", \"🥶\", \"😱\", \"🐲\"],\n      lastRacers: [],\n    };\n  }\n\n  inputAttribute = (e) => {\n    this.setState({ [e.target.name] : e.target.value })\n  }\n\n  inputRacers = () => {\n    return (\n      <InputRacers>\n        <input\n          placeholder=\"Contestant Name\" \n          name=\"name\" \n          type=\"text\"\n          value={this.state.name} \n          onChange={(e) => this.inputAttribute(e)}/>\n        <Tooltip title=\"Add Contestant!\" arrow>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.inputBtn()}>\n            +\n          </Button>\n        </Tooltip>\n      </InputRacers>\n    )\n  }\n\n  inputBtn = () => {\n    let message = `${this.state.name} has been added to the race!`\n    this.setState({ raceMessage: message})\n    let newRacer = {\n      id: Date.now(),\n      name: this.state.name,\n      currentPlace: this.state.currentPlace,\n      speedboost: false,\n      icon: this.state.icons[Math.floor(Math.random() * this.state.icons.length)],\n    }\n    let newRacers = this.state.racers;\n    newRacers.push(newRacer);\n    this.setState({ racers : newRacers });\n    this.setState({ name: \"\" });\n  }\n\n  deleteRacer = (id) => {\n    let smallerRoster = this.state.racers\n    smallerRoster.forEach((racer, i) => {\n      if (racer.id === id) {\n        smallerRoster.splice(i, 1)\n      }\n    })\n    this.setState({ racers : smallerRoster })\n  }\n\n  boostRacer = (id) => {\n    let boostRoster = this.state.racers\n    boostRoster.forEach((racer, i) => {\n      if (racer.id === id) {\n        racer.speedboost = true;\n      }\n    })\n    this.setState({ racers: boostRoster })\n  }\n\n  setupRace = () => {\n    if (this.state.racers.length === 0) {\n      this.setState({ raceMessage: \"Add Contestants!\" })\n      return\n    }\n    this.setState({ raceMessage: \"The race has started!!\" })\n    this.setState({ raceStart: true });\n    this.startRace();\n  }\n\n  speedBoostCheck = (currentRacer) => {\n    if ((currentRacer.speedboost === true) && (currentRacer.currentPlace < 6)) {\n      return true;\n    }\n    return false;\n  }\n\n  startRace = () => {\n    let numRacers = this.state.racers.length\n    let randomIndex = Math.floor((Math.random() * numRacers));\n    let racerUpdate = this.state.racers;      \n    racerUpdate[randomIndex].currentPlace++;\n    this.speedBoostCheck(racerUpdate[randomIndex]) && racerUpdate[randomIndex].currentPlace ++;\n    let round = this.state.currentRound;\n    round++;\n    this.setState({ currentRound : round })\n    this.setState({ racers : racerUpdate });\n    if ((racerUpdate[randomIndex].currentPlace >= this.state.finishPlace)) {\n      this.winner(racerUpdate, randomIndex)\n    }\n    setTimeout(() => {\n      if(this.state.winCondition === false){\n        this.startRace()\n      }\n    }, 700)\n  }\n\n  reRace = () => {\n    let refreshRacers = this.state.racers.map(racer => {\n      let resetRacer = {}\n      resetRacer.id =  racer.id;\n      resetRacer.name = racer.name;\n      resetRacer.icon = racer.icon;\n      resetRacer.currentPlace = 0;\n      return (\n        resetRacer\n      )\n    })\n    this.setState({ currentRound: 0 })\n    this.setState({ winCondition: false })\n    this.setState({ racers: refreshRacers })\n  }\n\n  winner = (racerUpdate, randomIndex) => {\n    this.whosWinning();\n    setTimeout(() => {\n      this.setState({ winCondition: true });\n    }, 600)\n    this.setState({ raceStart: false })\n    let message = racerUpdate[randomIndex].name + \" is the winner!!\";\n    this.setState({ raceMessage: message });\n  }\n\n  renderWinners = (racer, index) => {\n    return (\n      <p key=\"-1\">\n        {index === 0 && \"1st place: \"}\n        {index === 1 && \"2nd place: \"}\n        {index === 2 && \"3rd place: \"}\n        {index >= 3 && `${index + 1}th place: `}\n        {racer.name}\n      </p>\n    )\n  }\n\n  whosWinning = () => {\n    let lastRacerRoster = [];\n    this.state.racers.forEach(racer => \n        lastRacerRoster.push(racer)\n    );\n    const sortedRacers = lastRacerRoster.sort((a, b) => {\n      return b.currentPlace - a.currentPlace\n    }).map((racer, index) => {\n      return (\n        this.renderWinners(racer, index)\n      );\n    });\n    this.setState({ lastRacers : sortedRacers})\n  }\n\n  render () {\n    const displayRacers = this.state.racers.map(racer => {\n      let racePosition = `racer place${racer.currentPlace}`\n      return (\n        <div key={racer.id} className={racePosition}>\n          <DeleteBtn onClick={() => this.deleteRacer(racer.id)}>\n            🗡\n          </DeleteBtn>\n          <CarrotBtn onClick={() => this.boostRacer(racer.id)}>\n            <span role=\"img\" aria-label=\"carrot\">🥕</span>\n          </CarrotBtn>\n          <Typography variant=\"h4\">\n            {racer.icon}\n          </Typography>\n          <br/>\n          <Typography variant=\"h5\">\n            {racer.name}\n          </Typography>\n        </div>\n      );\n    })\n\n    return (\n      <GameBoard>\n        <Header>\n          <TitleAndRules>\n            <Typography variant=\"h2\">Dubious Derby</Typography>\n            <Rules>\n              <li>Welcome to Dubious Derby!</li>\n              <li>Enter in New Contestants below.</li>\n              <li>When you're ready hit start!</li>\n              <li>The winner is the first to the finish line!</li>\n            </Rules>\n            {this.state.raceStart === false && this.inputRacers()}\n          </TitleAndRules>\n          <Tooltip title=\"Start the Race!\" arrow>\n            <Button\n              id=\"start_btn\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => this.setupRace()}\n            >\n              {this.state.currentRound === 0\n                ? \"Start\"\n                : `Round: ${this.state.currentRound}`}\n            </Button>\n          </Tooltip>\n        </Header>\n        {this.state.lastRacers.length > 0 && (\n          <Body>\n            <RaceMessage>{this.state.raceMessage}</RaceMessage>\n          </Body>\n        )}\n        {this.state.racers.length > 0 && (\n          <RaceTrack>{displayRacers}</RaceTrack>\n        )}\n        {this.state.winCondition === true && (\n          <RaceStats>\n            {this.state.lastRacers}\n            <Button\n              id=\"rerace_btn\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => this.reRace()}>\n              Reset Race!\n            </Button>\n          </RaceStats>\n        )}\n      </GameBoard>\n    );\n\n  }\n}\n\nexport default App;\n\nconst GameBoard = styled.div`\n  padding: 2%;\n  color: white;\n  height: 1000px;\n`\n\nconst TitleAndRules = styled.div`\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  height: 300px;\n`;\n\nconst RaceMessage = styled.div`\n  width: 700px;\n  font-size: 30px;\n  color: orange;\n  margin: 2% auto;\n`;\n\nconst Body = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Rules = styled.ul`\n  list-style-type: none;\n  font-size: 1.5em;\n`\n\nconst InputRacers = styled.div`\n  margin-left: 40px;\n  input {\n    background: transparent;\n    height: 32px;\n    color: white;\n    margin-right: 5%;\n  }\n`\n\nconst RaceStats = styled.div`\n  position: absolute;\n  padding: 18% 25%;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  font-size: 32px;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nconst RaceTrack = styled.div`\n  background-image: url(${racetrack});\n  background-size: 100% 380px;\n  background-repeat: repeat-y;\n  padding: 2% 6%;\n`;\n\nconst DeleteBtn = styled.button`\n  position: absolute;\n  left: 18px;\n  font-size: 30px;\n  background: transparent;\n  outline: none;\n  border: none;\n  &:hover {\n    font-size: 40px;\n    outline: none;\n  }\n`\n\nconst CarrotBtn = styled.button`\n  position: absolute;\n  left: 42px;\n  font-size: 30px;\n  background: transparent;\n  border: none;\n  &:hover {\n    font-size: 40px;\n  }\n  &:active {\n    border: 1px solid orange;\n  }\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}