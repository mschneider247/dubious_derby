{"version":3,"sources":["images/racetrack.jpg","App.js","index.js"],"names":["module","exports","App","inputAttribute","e","setState","target","name","value","inputRacers","InputRacers","placeholder","type","state","onChange","Tooltip","title","arrow","Button","id","variant","color","onClick","inputBtn","refactorName","message","raceMessage","newRacer","Date","now","currentPlace","speedboost","icon","icons","Math","floor","random","length","newRacers","racers","push","characters","split","newName","forEach","character","index","toUpperCase","deleteRacer","smallerRoster","racer","i","splice","boostRacer","boostRoster","setupRace","raceStart","startRace","speedBoostCheck","currentRacer","numRacers","randomIndex","racerUpdate","round","currentRound","finishPlace","winner","setTimeout","winCondition","raceSpeed","reRace","refreshRacers","map","resetRacer","whosWinning","renderWinners","key","lastRacerRoster","sortedRacers","sort","a","b","winnerRole","displayedWinners","lastRacers","setSpeed","speed","winnerName","displayRacers","this","racePosition","className","DeleteBtn","CarrotBtn","role","aria-label","Typography","NameBackground","RacerName","GameBoard","Header","TitleAndRules","Rules","ButtonGroup","size","Body","RaceMessage","RaceTrack","RaceStats","Component","styled","div","ul","racetrack","button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dba089d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/racetrack.c2d3b8ab.jpg\";","import React, { Component } from 'react';\nimport 'typeface-roboto';\nimport './App.css'\nimport { Button, Typography, Tooltip, ButtonGroup } from '@material-ui/core';\nimport styled from 'styled-components';\nimport racetrack from './images/racetrack.jpg'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      currentRound: 0,\n      currentPlace: 0,\n      finishPlace: 13,\n      raceStart: false,\n      raceMessage: \"\",\n      winCondition: false,\n      winnerName: \"\",\n      racers: [],\n      icons: [\"🐶\", \"🐱\", \"🐭\", \"🐹\", \"🐰\", \"🦊\", \"🐻\", \"🐼\", \"🐨\", \"🐯\", \"🦁\", \"🐮\", \"🐷\", \"🐸\", \"🐵\", \"🤪\", \"🤨\", \"🧐\", \"🤓\", \"😎\", \"🤩\", \"🥳\", \"🥴\", \"🤢\", \"🤮\", \"🤒\", \"🤕\", \"🤑\", \"🤠\", \"😈\", \"👹\", \"💀\", \"👽\", \"👾\", \"🤖\", \"🎃\", \"🧠\",\"😭\", \"😤\", \"🤬\", \"🤯\", \"🥶\", \"😱\", \"🐲\"],\n      lastRacers: [],\n      raceSpeed: 420,\n    };\n  }\n\n  inputAttribute = (e) => {\n    this.setState({ [e.target.name] : e.target.value }) \n  }\n\n  inputRacers = () => {\n    return (\n      <InputRacers>\n        <input\n          placeholder=\"Contestant Name\" \n          name=\"name\" \n          type=\"text\"\n          value={this.state.name} \n          onChange={(e) => this.inputAttribute(e)}/>\n        <Tooltip title=\"Add Contestant!\" arrow>\n          <Button id=\"input_btn\" variant=\"contained\" color=\"primary\" onClick={() => this.inputBtn()}>\n            +\n          </Button>\n        </Tooltip>\n      </InputRacers>\n    )\n  }\n\n  inputBtn = () => {\n    let name = this.refactorName(this.state.name);\n    if (name !== '') { \n      let message = `${name} has been added to the race!`\n      this.setState({ raceMessage: message})\n      let newRacer = {\n        id: Date.now(),\n        name: name,\n        currentPlace: this.state.currentPlace,\n        speedboost: false,\n        icon: this.state.icons[Math.floor(Math.random() * this.state.icons.length)],\n      }\n      let newRacers = this.state.racers;\n      newRacers.push(newRacer);\n      this.setState({ racers : newRacers });\n      this.setState({ name: \"\" });\n    } else {\n      this.setState({ raceMessage: \"Please enter a name!\"})\n    }\n  }\n\n  refactorName = (name) => {\n    let characters = name.split('')\n    let newName = ''\n    if (characters.length) {\n      characters.forEach((character, index) => {\n        if ((index > 17) || (character === '?')) {\n          return\n        }\n        if (!index) {\n          newName += character.toUpperCase()\n        } else {\n          newName += character\n        }\n      })\n    }\n    return newName;\n  }\n\n  deleteRacer = (id) => {\n    let smallerRoster = this.state.racers\n    smallerRoster.forEach((racer, i) => {\n      if (racer.id === id) {\n        if (!racer.icon) {\n          smallerRoster.splice(i, 1);\n          let message = 'Fresh jerky at the food court!';\n          this.setState({ raceMessage : message })\n        } else {\n          let message = racer.name + ' just lost their head!';\n          this.setState({ raceMessage: message });\n          racer.icon = '';\n          racer.name = '';\n        }\n      }\n    })\n    this.setState({ racers : smallerRoster })\n  }\n\n  boostRacer = (id) => {\n    let boostRoster = this.state.racers\n    boostRoster.forEach((racer, i) => {\n      if (racer.id === id) {\n        racer.speedboost = true;\n        let message = '';\n        if (racer.name) {\n          message += racer.name\n        } else {\n          message += 'A headless donkey'\n        }\n        message += ' has been BOOSTED!';\n        this.setState({ raceMessage : message});\n      }\n    })\n    this.setState({ racers: boostRoster })\n  }\n\n  setupRace = () => {\n    if (this.state.racers.length === 0) {\n      this.setState({ raceMessage: \"Add Contestants!\" })\n      return\n    }\n    this.setState({ raceMessage: \"The race has started!!\" })\n    this.setState({ raceStart: true });\n    this.startRace();\n  }\n\n  speedBoostCheck = (currentRacer) => {\n    if ((currentRacer.speedboost === true) && (currentRacer.currentPlace < 9)) {\n      return true;\n    }\n    return false;\n  }\n\n  startRace = () => {\n    let numRacers = this.state.racers.length\n    let randomIndex = Math.floor((Math.random() * numRacers));\n    let racerUpdate = this.state.racers;     \n    racerUpdate[randomIndex].name && racerUpdate[randomIndex].currentPlace++;\n    this.speedBoostCheck(racerUpdate[randomIndex]) && racerUpdate[randomIndex].currentPlace ++;\n    let round = this.state.currentRound;\n    round++;\n    this.setState({ currentRound : round })\n    this.setState({ racers : racerUpdate });\n    if ((racerUpdate[randomIndex].currentPlace >= this.state.finishPlace)) {\n      this.winner(racerUpdate, randomIndex)\n    }\n    setTimeout(() => {\n      !this.state.winCondition && this.startRace()\n    }, racerUpdate[randomIndex].name ? this.state.raceSpeed : 0)\n  }\n\n  reRace = () => {\n    let refreshRacers = this.state.racers.map(racer => {\n      let resetRacer = {}\n      resetRacer.id = racer.id;\n      resetRacer.name = racer.name;\n      resetRacer.icon = racer.icon;\n      resetRacer.currentPlace = 0;\n      return (\n        resetRacer\n      )\n    })\n    this.setState({ currentRound: 0 })\n    this.setState({ winCondition: false })\n    this.setState({ raceStart: false })\n    this.setState({ racers: refreshRacers })\n  }\n\n  winner = (racerUpdate, randomIndex) => {\n    this.whosWinning();\n    setTimeout(() => {\n      this.setState({ winCondition: true });\n    }, 600)\n    let message = racerUpdate[randomIndex].name + \" is the winner!!\";\n    this.setState({ raceMessage: message });\n  }\n\n  renderWinners = (racer, index) => {\n    return (\n      <p key={index}>\n        {index === 0 && \"1st place: \"}\n        {index === 1 && \"2nd place: \"}\n        {index === 2 && \"3rd place: \"}\n        {index >= 3 && `${index + 1}th place: `}\n        {racer.name}\n      </p>\n    )\n  }\n\n  whosWinning = () => {\n    let lastRacerRoster = [];\n    this.state.racers.forEach(racer => \n      lastRacerRoster.push(racer)\n    );\n    const sortedRacers = lastRacerRoster.sort((a, b) => {\n      return b.currentPlace - a.currentPlace\n    })\n    const winnerRole = []\n    sortedRacers.forEach(racer => {\n      if (racer.name) {\n        winnerRole.push(racer)\n      }\n    })\n    const displayedWinners = winnerRole.map((racer, index) => {\n      return (\n        this.renderWinners(racer, index)\n      );\n    });\n    this.setState({ lastRacers : displayedWinners })\n  }\n\n  setSpeed = (speed) => {\n    this.setState({ raceSpeed : speed })\n  }\n\n  render () {\n    const displayRacers = this.state.racers.map(racer => {\n      let racePosition = `racer place${racer.currentPlace}`\n      return (\n        <div key={racer.id} className={racePosition}>\n          <DeleteBtn onClick={() => this.deleteRacer(racer.id)}>\n            🗡\n          </DeleteBtn>\n          <CarrotBtn onClick={() => this.boostRacer(racer.id)}>\n            <span role=\"img\" aria-label=\"carrot\">🥕</span>\n          </CarrotBtn>\n          <Typography variant=\"h4\">\n            {racer.icon}\n          </Typography>\n          <br/>\n          <NameBackground>\n            <RacerName>\n              {racer.name}\n            </RacerName> \n          </NameBackground>\n        </div>\n      );\n    })\n\n    return (\n      <GameBoard>\n        <Header>\n          {!this.state.raceStart &&\n          <TitleAndRules>\n            <Typography variant=\"h2\">Dubious Derby</Typography>\n              <Rules>\n                <li>Welcome to Dubious Derby!</li>\n                <li>Enter in New Contestants below.</li>\n                <li>When you're ready hit start!</li>\n                <li>The winner is the first to the finish line!</li>\n              </Rules>\n            {this.state.raceStart === false && this.inputRacers()}\n          </TitleAndRules>\n          }\n          {!this.state.raceStart && \n            <div id=\"speed_and_start_buttons\">\n                <ButtonGroup size=\"large\" color=\"primary\" aria-label=\"speed buttons\">\n                  <Tooltip title=\"Slow Speed\" arrow>\n                  <Button\n                    id=\"slowSpeed\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => this.setSpeed(680)}\n                  >\n                    Slow\n                  </Button>\n                  </Tooltip>\n                  <Tooltip title=\"Normal Speed\" arrow>\n                  <Button\n                    id=\"normSpeed\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => this.setSpeed(420)}\n                  >\n                    Norm\n                  </Button>\n                  </Tooltip>\n                  <Tooltip title=\"Fast Speed\" arrow>\n                  <Button\n                    id=\"fastSpeed\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => this.setSpeed(180)}\n                  >\n                    Fast\n                  </Button>\n                  </Tooltip>\n                </ButtonGroup> \n              <Tooltip title=\"Start the Race!\" arrow>\n                <Button\n                  id=\"start_btn\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"large\"\n                  onClick={() => this.setupRace()}\n                >\n                  Start\n                </Button>\n              </Tooltip>\n            </div>\n          }\n        </Header>\n        <Body>\n          <RaceMessage>{this.state.raceMessage}</RaceMessage>\n        </Body>\n        {this.state.racers.length > 0 && (\n          <RaceTrack>{displayRacers}</RaceTrack>\n        )}\n        {this.state.winCondition === true && (\n          <RaceStats>\n            {this.state.lastRacers}\n            <Button\n              id=\"rerace_btn\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => this.reRace()}>\n              Reset Race!\n            </Button>\n          </RaceStats>\n        )}\n      </GameBoard>\n    );\n\n  }\n}\n\nexport default App;\n\nconst GameBoard = styled.div`\n  padding-top: 2%;\n  color: #E1F2FE;\n`\n\nconst TitleAndRules = styled.div`\n  padding-left: 4%;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst RaceMessage = styled.div`\n  width: 700px;\n  font-size: 30px;\n  color: #ED9B40;\n  margin: 2% auto;\n`;\n\nconst Body = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst Rules = styled.ul`\n  list-style-type: none;\n  font-size: 1.5em;\n`\n\nconst InputRacers = styled.div`\n  margin-left: 40px;\n  input {\n    background: transparent;\n    height: 32px;\n    color: white;\n    margin-right: 5%;\n  }\n`\n\nconst NameBackground = styled.div`\n  border-radius: 10px;\n  background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.3));\n`\n\nconst RacerName = styled.div`\n  font-size: 28px;\n`\n\nconst RaceStats = styled.div`\n  position: absolute;\n  padding: 18% 25%;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  font-size: 32px;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nconst RaceTrack = styled.div`\n  background-image: url(${racetrack});\n  background-size: 100% 400px;\n  background-repeat: repeat-y;\n  padding: 6px 30px;\n  border-radius: 2px;\n`;\n\nconst DeleteBtn = styled.button`\n  position: absolute;\n  left: 18px;\n  font-size: 30px;\n  background: transparent;\n  outline: none;\n  border: none;\n  &:hover {\n    font-size: 35px;\n    outline: none;\n  }\n`\n\nconst CarrotBtn = styled.button`\n  position: absolute;\n  left: 42px;\n  font-size: 30px;\n  background: transparent;\n  border: none;\n  &:hover {\n    font-size: 35px;\n  }\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}